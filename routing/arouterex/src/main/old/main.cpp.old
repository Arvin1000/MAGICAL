#include "gr/ARoute.h"
#include "dr/DetailedRouter.h"
#include "parser/GR2DR.h"
#include "parser/lefdef/LefReader.h"
#include "parser/TechfileReader.h"
#include "writer/gdsii/WriteGdsLayout.h"
//#include "main.h"
#include "dr/FixedViaSelector.h"
#include "db/DRrtrees.h"

extern PROJECT_NAMESPACE::IntType MET_NUM;


// print Layer planner welcome info
void
printWelcome()
{
  printf("\n");
  printf("=====================================================================\n");
  printf("                 ARoute : Analog Router                             \n");
  printf("                                                                     \n");
  printf("    @ Copyright 2001,2014 Oracle, Inc.    All Rights Reserved.       \n");
  printf("                                                                     \n");
  printf("             Authors     : Derong Liu, Biying Xu                     \n");
  printf("             Date        : 02/2018                                   \n");
  printf("=====================================================================\n");
}


#ifdef AROUTER_GLOBAL_ROUTING_EXTRACTION_OLD
int main(int argc, char* argv[])
{
    using namespace PROJECT_NAMESPACE;
    printWelcome();

    ARoute lplan;
    double t_start = bLib::timer();
    if (false == lplan.parseParameters(argc, argv))        // parse input parameters
    {
        bool init = lplan.generateRandomBenchmark();
        if (init == false)
            return init;
    }
    
    if (false == lplan.initAll())                          // init all data-structures
    {
        std::cout << " ERROR| Iitialization fails ... " << std::endl;
        return 1;
    }
    lplan.solve();                                         // solve layer assignment
    lplan.printLayoutInfo();

    // extract the symmetry information & draw the baseline 
    RExtract rExtractor;
    if (false == rExtractor.parseInputFiles(argc, argv))
    {
        std::cout << "ERROR| Parsing files fails ... " << std::endl;
    }
    rExtractor.solve();                                    // extract the rcs

    ARoute eplan;                                          // route the nets without any baselines
    eplan.m_base = true;
    eplan.parseParameters(argc, argv);
    eplan.routeBase(); 
    eplan.solve();
    
    ARoute rplan;
    rplan.m_extract = true;
    if (false == rplan.parseParameters(argc, argv))        // parse input parameters
    {
        bool init = rplan.generateRandomBenchmark();
        if (init == false)
            return init;
    } 

    if (false == rplan.routeAll())                          // init all data-structures
    {
        std::cout << " ERROR| Iitialization fails ... " << std::endl;
        return 1;
    }
    rplan.solve();                                         // solve layer assignment
    

    double t_end = bLib::timer();

    printf("\n");
    printf("STAT | CPU time for LPlan = %.3f s\n\n\n", t_end - t_start);

    return 0;
}

#endif /// AROUTER_GLOBAL_ROUTING_EXTRACTION


#ifdef AROUTER_GLOBAL_DETAILED_ROUTING_OLD
int main(int argc, char* argv[])
{
    using namespace PROJECT_NAMESPACE;
    printWelcome();

    ARoute lplan;
    double t_start = bLib::timer();
    if (false == lplan.parseParameters(argc, argv))        // parse input parameters
    {
        bool init = lplan.generateRandomBenchmark();
        if (init == false)
            return init;
    }
    
    if (false == lplan.initAll())                          // init all data-structures
    {
        std::cout << " ERROR| Iitialization fails ... " << std::endl;
        return 1;
    }

    //////////////////////////
    /// Build up database
    //////////////////////////
    
    TechDatabase techDB;
    MacroDatabase macroDB;
    readLef(lplan.techLef(), techDB, macroDB);
    readTechfile(lplan.techLayer(), techDB);
    DatabaseDR drDB;

    Database db(drDB, techDB, macroDB);

    ////////////////////////////
    /// Solve GR
    ////////////////////////////
    lplan.solve();                                         // solve layer assignment
    lplan.printLayoutInfo();


    ///////////////////////
    /// Detailed routing
    ///////////////////////
    

    GR2DR(drDB, lplan);

    drDB.initAll(&db);

    DetailedRouter dRouter = DetailedRouter(db);
    dRouter.directRouteFlow();

    //dRouter.drawNetDRNode(dbDR.netArray().size() - 1);
    //dRouter.allPinLocationCSV();
    //dRouter.checkPinOverlap();
    double t_end = bLib::timer();

    printf("\n");
    printf("STAT | CPU time for LPlan = %.3f s\n\n\n", t_end - t_start);

    /// Write to gds
    WriteGdsLayout wgl(db);
    Assert(wgl.writeLayout("./output/out.gds"));

    return 0;
}
#endif 

#ifdef AROUTER_LEF_PRINT
int main(int argc, char* argv[])
{
    using namespace PROJECT_NAMESPACE;
    std::string lefFile = "";
    argv++;
    lefFile = (*argv);
    INF("Reading LEF : %s \n", lefFile.c_str());
    TechDatabase techDB;
    MacroDatabase macroDB;
    readLef(lefFile, techDB, macroDB);

    for (const auto &cut : techDB.cutLayers())
    {
        std::cout<<"CUT "<<cut.name<<" spacing  "<<cut.spacing<<" width "<<cut.width<<std::endl;
    }
    for (const auto &routing : techDB.routingLayers())
    {
        std::cout<<"ROUTING "<<routing.name<<" width "<<routing.width<<" pitch "<<routing.pitch<<" direction "<<routing.direction;
        for (RealType spacing : routing.spacing)
        {
            std::cout<<" spacing: "<< spacing;
        }
        std::cout<<std::endl;

    }
}
#endif

#ifdef AROUTER_DRAFT_TEST
int main(int argc, char* argv[])
{
    using namespace PROJECT_NAMESPACE;
    printWelcome();

    ARoute lplan;
    double t_start = bLib::timer();
    if (false == lplan.parseParameters(argc, argv))        // parse input parameters
    {
        bool init = lplan.generateRandomBenchmark();
        if (init == false)
            return init;
    }
    
    if (false == lplan.initAll())                          // init all data-structures
    {
        std::cout << " ERROR| Iitialization fails ... " << std::endl;
        return 1;
    }

    //////////////////////////
    /// Build up database
    //////////////////////////
    
    TechDatabase techDB;
    MacroDatabase macroDB;
    readLef(lplan.techLef(), techDB, macroDB);
    readTechfile(lplan.techLayer(), techDB);
    DatabaseDR drDB;

    Database db(drDB, techDB, macroDB);

    ////////////////////////////
    /// Solve GR
    ////////////////////////////
    lplan.solve();                                         // solve layer assignment
    lplan.printLayoutInfo();


    ///////////////////////
    /// Detailed routing
    ///////////////////////
    

    GR2DR(drDB, lplan);

    drDB.initAll(&db);

    db.macroDB().fixedViaVec2D().at(1).at(0).cutRectArray().emplace_back(Box<LocType>(300, 300, 600, 600));
    for (const auto & cutBox : db.macroDB().fixedViaVec2D().at(1).at(0).cutRectArray())
    {
        std::cout<<std::string(cutBox)<<std::endl;
    }
    ViaPlaced via1(XYZ<IndexType>(0, 0, 1), XYZ<IndexType>(0,0,2), 0);
    via1.origin()  = db.drDB().grid3D().layer2LayerIntersectPt(via1.nodeGridIdxLower(), via1.nodeGridIdxHigher());
    
    ViaPlaced via2(XYZ<IndexType>(10, 10, 1), XYZ<IndexType>(10,10,2), 0);
    via2.origin()  = db.drDB().grid3D().layer2LayerIntersectPt(via2.nodeGridIdxLower(), via2.nodeGridIdxHigher());
    std::cout<<"Origin "<<via2.origin().toStr()<<std::endl;

    CutRtree &cutRtree = drDB.cutRtreeArray().at(1);
    cutRtree.insert(via1);
    cutRtree.insert(via2);
    Box<LocType> searchBox (0,0, 1000, 1000);
    Box<LocType> searchBox2(0, 0, 99999999, 999999999);
    for (const auto &result : cutRtree.searchBox(searchBox))
    {
        std::cout<<"Found "<<std::endl;
    }
    std::cout<<"Large Box"<<std::endl;
    for (const auto &result : cutRtree.searchBox(searchBox2))
    {
        std::cout<<"Found "<<std::endl;
    }
    cutRtree.remove(via1);
    std::cout<<"Remove one via"<<std::endl;
    for (const auto &result : cutRtree.searchBox(searchBox))
    {
        std::cout<<"Found "<<std::endl;
    }
    std::cout<<"Large Box"<<std::endl;
    for (const auto &result : cutRtree.searchBox(searchBox2))
    {
        std::cout<<"Found "<<std::endl;
    }

}
#endif
